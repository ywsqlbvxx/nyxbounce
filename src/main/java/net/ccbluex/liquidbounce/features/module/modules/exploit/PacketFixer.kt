package net.ccbluex.liquidbounce.features.module.modules.exploit

import de.gerrygames.viarewind.utils.PacketUtil
import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.modules.player.Blink
import net.ccbluex.liquidbounce.features.module.modules.render.FreeCam
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.value.*
import net.minecraft.network.play.client.*

object PacketFixer : Module(
    name = "PacketFixer",
    spacedName = "Packet Fixer",
    description = "Fix some weird packet issues. May bypass some Verus checks.",
    category = ModuleCategory.EXPLOIT
) {

    private val fixBlinkAndFreecam = BoolValue("BlinkFreeCam3Y", true)
    private val fixPacketPlayer = BoolValue("Timer3A", true)
    private val fixItemSwap = BoolValue("Scaffold14D", true)
    private val fixInvalidPlace = BoolValue("Scaffold14E", true)
    private val fixGround = BoolValue("Fly4I", false)
    private val fixIdleFly = BoolValue("Fly4C", false)

    private var x = 0.0
    private var y = 0.0
    private var z = 0.0
    private var yaw = 0.0F
    private var pitch = 0.0F
    private var jam = 0
    private var packetCount = 0
    private var prevSlot = -1

    override fun onEnable() {
        jam = 0
        packetCount = 0
        prevSlot = -1

        if (mc.thePlayer == null) return
        x = mc.thePlayer.posX
        y = mc.thePlayer.posY
        z = mc.thePlayer.posZ
        yaw = mc.thePlayer.rotationYaw
        pitch = mc.thePlayer.rotationPitch
    }

    @EventTarget(priority = 1)
    private fun onPacket(event: PacketEvent) {
        if (mc.thePlayer == null || mc.theWorld == null || event.isCancelled) return

        val packet = event.packet

        // Fix ground check
        if (fixGround.get() && packet is C03PacketPlayer && packet !is C04PacketPlayerPosition && packet !is C06PacketPlayerPosLook) {
            if ((mc.thePlayer.motionY == 0.0 || (mc.thePlayer.onGround && mc.thePlayer.isCollidedVertically)) && !packet.onGround)
                packet.onGround = true
        }

        if (packet is C04PacketPlayerPosition) { x = packet.x; y = packet.y; z = packet.z; jam = 0 }
        if (packet is C05PacketPlayerLook) { yaw = packet.yaw; pitch = packet.pitch }
        if (packet is C06PacketPlayerPosLook) { x = packet.x; y = packet.y; z = packet.z; yaw = packet.yaw; pitch = packet.pitch; jam = 0 }

        // Fix bad packets from timer/fast use
        if (fixPacketPlayer.get() && packet is C03PacketPlayer && packet !is C04PacketPlayerPosition && packet !is C06PacketPlayerPosLook) {
            jam++
            if (jam > 20) {
                jam = 0
                event.cancelEvent()
                PacketUtils.sendPacketNoEvent(C06PacketPlayerPosLook(x, y, z, yaw, pitch, packet.onGround))
            }
        }

        // Fix duplicated hotbar switch
        if (!mc.isSingleplayer && fixItemSwap.get() && packet is C09PacketHeldItemChange) {
            if (packet.slotId == prevSlot) event.cancelEvent()
            else prevSlot = packet.slotId
        }

        // Fix invalid placement
        if (fixInvalidPlace.get() && packet is C08PacketPlayerBlockPlacement) {
            packet.facingX = packet.facingX.coerceIn(-1f, 1f)
            packet.facingY = packet.facingY.coerceIn(-1f, 1f)
            packet.facingZ = packet.facingZ.coerceIn(-1f, 1f)
        }

        // Blink & FreeCam canceling C03s while sending C00
        val blink = LiquidBounce.moduleManager.getModule(Blink::class.java)!!
        val freeCam = LiquidBounce.moduleManager.getModule(FreeCam::class.java)!!
        if (fixBlinkAndFreecam.get() && ((blink.state && !blink.pulseValue.get()) || freeCam.state) && packet is C00PacketKeepAlive)
            event.cancelEvent()

        // Fix idle fly
        if (fixIdleFly.get() && packet is C03PacketPlayer && !packet.onGround &&
            packet !is C04PacketPlayerPosition && packet !is C05PacketPlayerLook && packet !is C06PacketPlayerPosLook
        ) {
            packetCount++
            if (packetCount >= 2) event.cancelEvent()
        } else packetCount = 0
    }
}
