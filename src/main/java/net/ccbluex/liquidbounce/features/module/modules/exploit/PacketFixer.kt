/*
 * LiquidBounce+ Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/WYSI-Foundation/LiquidBouncePlus/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import de.gerrygames.viarewind.utils.PacketUtil
import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.module.modules.player.Blink
import net.ccbluex.liquidbounce.features.module.modules.render.FreeCam
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.value.BoolValue
import net.minecraft.network.play.client.*

@ModuleInfo(
    name = "PacketFixer",
    spacedName = "Packet Fixer",
    description = "Fix some weird packet issues. May bypass some Verus checks.",
    category = ModuleCategory.EXPLOIT
)
class PacketFixer : Module() {

    private val fixBlinkAndFreecam = BoolValue("BlinkFreeCam3Y", true)
    private val fixPacketPlayer = BoolValue("Timer3A", true)
    private val fixItemSwap = BoolValue("Scaffold14D", true)
    private val fixInvalidPlace = BoolValue("Scaffold14E", true)
    private val fixGround = BoolValue("Fly4I", false)
    private val fixIdleFly = BoolValue("Fly4C", false)

    private var x = 0.0
    private var y = 0.0
    private var z = 0.0
    private var yaw = 0.0F
    private var pitch = 0.0F
    private var jam = 0
    private var packetCount = 0
    private var prevSlot = -1

    override fun onEnable() {
        jam = 0
        packetCount = 0
        prevSlot = -1
        mc.thePlayer?.let {
            x = it.posX
            y = it.posY
            z = it.posZ
            yaw = it.rotationYaw
            pitch = it.rotationPitch
        }
    }

    @EventTarget(priority = 1)
    private fun onPacket(event: PacketEvent) {
        val player = mc.thePlayer ?: return
        val world = mc.theWorld ?: return
        if (event.isCancelled) return

        val packet = event.packet

        // Fix ground check
        if (fixGround.get() && packet is C03PacketPlayer && packet !is C04PacketPlayerPosition && packet !is C06PacketPlayerPosLook) {
            if ((player.motionY == 0.0 || (player.onGround && player.isCollidedVertically)) && !packet.onGround)
                packet.onGround = true
        }

        // Update position/rotation trackers
        when (packet) {
            is C04PacketPlayerPosition -> { x = packet.x; y = packet.y; z = packet.z; jam = 0 }
            is C05PacketPlayerLook -> { yaw = packet.yaw; pitch = packet.pitch }
            is C06PacketPlayerPosLook -> { x = packet.x; y = packet.y; z = packet.z; yaw = packet.yaw; pitch = packet.pitch; jam = 0 }
        }

        // Fix timer/fast-use packets
        if (fixPacketPlayer.get() && packet is C03PacketPlayer && packet !is C04PacketPlayerPosition && packet !is C06PacketPlayerPosLook) {
            jam++
            if (jam > 20) {
                jam = 0
                event.cancelEvent()
                PacketUtils.sendPacketNoEvent(C06PacketPlayerPosLook(x, y, z, yaw, pitch, packet.onGround))
            }
        }

        // Fix duplicate hotbar switch
        if (!mc.isSingleplayer && fixItemSwap.get() && packet is C09PacketHeldItemChange) {
            if (packet.slotId == prevSlot) event.cancelEvent() else prevSlot = packet.slotId
        }

        // Fix invalid block placements
        if (fixInvalidPlace.get() && packet is C08PacketPlayerBlockPlacement) {
            packet.facingX = packet.facingX.coerceIn(-1.0F, 1.0F)
            packet.facingY = packet.facingY.coerceIn(-1.0F, 1.0F)
            packet.facingZ = packet.facingZ.coerceIn(-1.0F, 1.0F)
        }

        // Fix Blink and FreeCam cancelling C03 while sending C00
        val blink = LiquidBounce.moduleManager.getModule(Blink::class.java)!!
        val freeCam = LiquidBounce.moduleManager.getModule(FreeCam::class.java)!!
        if (fixBlinkAndFreecam.get() && ((blink.state && !blink.pulseValue.get()) || freeCam.state) && packet is C00PacketKeepAlive)
            event.cancelEvent()

        // Fix idle fly
        if (fixIdleFly.get() && packet is C03PacketPlayer && !packet.onGround) {
            if (packet !is C04PacketPlayerPosition && packet !is C05PacketPlayerLook && packet !is C06PacketPlayerPosLook) {
                packetCount++
                if (packetCount >= 2) event.cancelEvent()
            } else {
                packetCount = 0
            }
        }
    }
}
